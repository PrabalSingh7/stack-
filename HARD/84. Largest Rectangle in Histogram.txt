84. Largest Rectangle in Histogram
Hard
13.8K
192
Companies
Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 

Constraints:

1 <= heights.length <= 105
0 <= heights[i] <= 104
Accepted
650.1K
Submissions
1.5M
Acceptance Rate
42.6%



class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        int res = -1;

        vector<int> ngl (n, -1);
        vector<int> ngr (n, n);

        stack<pair<int,int>> st;

        //ngl
        for(int i=0; i<n; i++)  {
            // cout<<i<<"\n";
            int val = heights[i];
            if(st.size()==0)    {
                ngl[i] = -1;
            }
            else {
                if(st.top().first<val)    {
                    ngl[i] = st.top().second;
                }
                else if(st.top().first >= val)   {
                    while(st.top().first >= val && !st.empty() ) {
                        // cout<<st.top().first<<"\n";
                        st.pop();
                        if(st.size()==0)
                            break;
                    }
                    if(st.size()>0 && st.top().first < val)    {
                        ngl[i] = st.top().second;
                    }
                    else {
                        ngl[i] = -1;
                    }
                }
            }
            
            st.push({val,i});
        }

        while(st.size()!=0) {   
            st.pop();
            if(st.size()==0)
                break;    
        }



        //ngr
        for(int i=n-1; i>=0; i--)  {
            int val = heights[i];
            if(st.size()==0)    {
                ngr[i] = n;
            }
            else {
                if(st.top().first<val)    {
                    ngr[i] = st.top().second;
                }
                else if(st.top().first >= val)   {
                    while(st.top().first >= val && !st.empty() ) {
                        st.pop();
                        if(st.size()==0)
                            break;
                    }
                    if(st.size()>0 && st.top().first < val)    {
                        ngr[i] = st.top().second;
                    }
                    else {
                        ngr[i] = n;
                    }
                }
            }
            
            st.push({val,i});
        }

        // for(auto i : ngl)
            // cout<<i<<" ";
        // cout<<"\n";
        // for(auto i : ngr)
            // cout<<i<<" ";
        // cout<<"\n \n \n";

        for(int i=0; i<n; i++)  {
            int currWidth = ngr[i] - ngl[i] - 1;
            int currHeight = heights[i];
            int currArea = currWidth * currHeight;
            res = max(currArea,res);
        }

        return res;
    }
};