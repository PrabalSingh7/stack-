1081. Smallest Subsequence of Distinct Characters
Medium
2.3K
169
Companies
Given a string s, return the 
lexicographically smallest
 
subsequence
 of s that contains all the distinct characters of s exactly once.

 

Example 1:

Input: s = "bcabc"
Output: "abc"
Example 2:

Input: s = "cbacdcbc"
Output: "acdb"
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.
 

Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/
Accepted
52.8K
Submissions
90.6K
Acceptance Rate
58.3%



class Solution {
public:
    string smallestSubsequence(string s) {
        unordered_map<char,vector<int>> mp;
        unordered_map<char,bool> vis;
        int n = s.size();

        for(int i=0; i<n; i++)  {
            mp[s[i]].push_back(i);
            vis[s[i]] = false;
        }

        stack<char> st;

        for(int i=0; i<n; i++)  {
            if(st.empty())  {
                st.push(s[i]);
                vis[s[i]] = 1;
            }
            else {
                if(vis[s[i]]==false)    {
                while(st.top()>s[i] && mp[st.top()][mp[st.top()].size()-1]>i) {
                        vis[st.top()] = false;
                        st.pop();
                        if(st.size()==0)
                            break;
                    }
                    st.push(s[i]);
                    vis[s[i]] = 1;
                }              
            }
        }      

        string res;
        while(st.size())    {
            res.push_back(st.top());
            st.pop();
        }
        reverse(res.begin(), res.end());

        return res;
    }
};